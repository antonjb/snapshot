'use strict';function blobToArrayBuffer(a){return new Promise((b,c)=>{const d=new FileReader;d.addEventListener('loadend',async()=>{b(d.result)}),d.addEventListener('error',c),d.readAsArrayBuffer(a)})}const DB_VERSION=4;class ImageDB{constructor(){const a=indexedDB.open('image-db',DB_VERSION);this.dbPromise=new Promise((b,c)=>{this.dbResolve=b,this.dbReject=c,a.onerror=(a)=>this.dbReject(a),a.onupgradeneeded=(a)=>this.createObjectStore(a),a.onsuccess=()=>this.dbOpened(a)})}storeRecord(a){null===a.id&&delete a.id;const b=new Promise((b,c)=>{this.dbPromise.then((d)=>{const e=d.transaction(['list'],'readwrite'),f=e.objectStore('list').put(a);f.onsuccess=()=>b(f.result),f.onerror=c}).catch(c)});return b}retrieveRecord(a){const b=new Promise((b,c)=>{this.dbPromise.then((d)=>{const e=d.transaction(['list'],'readonly'),f=e.objectStore('list').get(a);f.onsuccess=()=>b(f.result),f.onerror=c}).catch(c)});return b}deleteRecord(a,b=[]){const c=new Promise((c,d)=>{this.dbPromise.then((e)=>{const f=e.transaction(['list','media'],'readwrite');for(const a of b)f.objectStore('media').delete(a);f.objectStore('list').delete(a),f.oncomplete=()=>c(),f.onerror=d}).catch(d)});return c}storeRecordAndDeleteMedia(a,b=[]){if(null===a.id)return Promise.resolve(null);const c=new Promise((c,d)=>{this.dbPromise.then((e)=>{const f=e.transaction(['list','media'],'readwrite');for(const a of b)f.objectStore('media').delete(a);let g=null;const h=f.objectStore('list').put(a);h.onsuccess=()=>g=h.result,f.oncomplete=()=>c(g),f.onerror=d}).catch(d)});return c}async storeMedia(a,b){const c=await blobToArrayBuffer(a),d={media:c,type:a.type},e=new Promise((a,c)=>{this.dbPromise.then((e)=>{const f=e.transaction(['media'],'readwrite'),g=f.objectStore('media').put(d,b);g.onsuccess=()=>a(g.result),g.onerror=c}).catch(c)});return e}retrieveMedia(a){const b=new Promise((b,c)=>{this.dbPromise.then((d)=>{const e=d.transaction(['media'],'readonly'),f=e.objectStore('media').get(a);f.onsuccess=()=>{const a=f.result,c=new Blob([a.media],{type:a.type});b(c)},f.onerror=c}).catch(c)});return b}addSync(a){const b=new Promise((b,c)=>{return a.id||a.guid?void this.dbPromise.then((d)=>{const e=d.transaction(['sync'],'readwrite'),f=e.objectStore('sync').put(a);f.onsuccess=()=>b(),f.onerror=c}).catch(c):c('Neither local nor remote id was given')});return b}removeSync(a,b){const c=new Promise((c,d)=>{this.dbPromise.then((e)=>{if(!a&&!b)return d('Neither local nor remote id was given');const f=e.transaction(['sync'],'readwrite');f.objectStore('sync').delete([a,b]),f.oncomplete=()=>c(),f.onerror=d}).catch(d)});return c}listSync(){const a=new Promise((a,b)=>{this.dbPromise.then((c)=>{const d=c.transaction(['sync'],'readonly'),e=d.objectStore('sync').openCursor(),f=[];e.onsuccess=()=>{const b=e.result;b?(f.push(b.value),b.continue()):a(f)},e.onerror=b}).catch(b)});return a}setMeta(a,b){const c=new Promise((c,d)=>{this.dbPromise.then((e)=>{const f=e.transaction(['metadata'],'readwrite'),g=f.objectStore('metadata').put(b,a);g.onsuccess=()=>c(),g.onerror=d}).catch(d)});return c}getMeta(a){const b=new Promise((b,c)=>{this.dbPromise.then((d)=>{const e=d.transaction(['metadata'],'readonly'),f=e.objectStore('metadata').get(a);f.onsuccess=()=>b(f.result),f.onerror=c}).catch(c)});return b}all(){const a=new Promise((a,b)=>{this.dbPromise.then((c)=>{const d=c.transaction(['list'],'readonly'),e=d.objectStore('list').openCursor(),f=[];e.onsuccess=()=>{const b=e.result;b?(f.push(b.value),b.continue()):a(f)},e.onerror=b}).catch(b)});return a}dbOpened(a){this.dbResolve(a.result),this.dbPromise.then((a)=>{a.onerror=(a)=>this.error(a)})}error(a){console.error(a)}createObjectStore(a){const b=a.target,c=b.transaction,d=b.result;if(3>a.oldVersion){const b=d.createObjectStore('media',{autoIncrement:!0}),e=d.createObjectStore('list',{keyPath:'id',autoIncrement:!0});0!==a.oldVersion&&(2===a.oldVersion?this.upgrade2to3(b,e,c):d.deleteObjectStore('images'))}4>a.oldVersion&&(d.createObjectStore('metadata'),d.createObjectStore('sync',{keyPath:['id','guid']}))}upgrade2to3(a,b,c){const d=c.objectStore('images'),e=d.openCursor();e.onerror=(a)=>this.error(a),e.onsuccess=()=>{const d=e.result;if(d){const c=d.value,e={editedId:null,guid:'',id:null,lastSyncVersion:-1,localFilterChanges:!0,localImageChanges:!0,originalId:null,thumbnailId:null,transform:c.transform},f=a.put(c.original);f.onerror=(a)=>this.error(a),f.onsuccess=()=>{if(e.originalId=f.result,c.edited){const d=a.put(c.edited);d.onerror=(a)=>this.error(a),d.onsuccess=()=>{e.editedId=d.result,b.put(e)}}else b.put(e)},d.continue()}else c.db.deleteObjectStore('images')}}}const imageDB=new ImageDB;var constants={CLIENT_ID:'151109002640-6hsca3c8lv5eutorkavk157rle1rjsgt.apps.googleusercontent.com',DRIVE_FOLDER:'Snapshot Photos',IMAGE_TYPE:'image/jpeg',SUPPORTS_BGSYNC:'SyncManager'in self,SUPPORTS_IMAGE_CAPTURE:'ImageCapture'in self,SUPPORTS_MEDIA_DEVICES:'mediaDevices'in navigator,SYNC_FREQUENCY:2e4};const subscribers=new Map,pubsub={publish(a){if(subscribers.has(a.channel)){const b=subscribers.get(a.channel);console.log(`[PUBSUB] ${a.channel}: ${b.size} handlers`);for(const c of b)c(a)}},subscribe(a,b){subscribers.has(a)||subscribers.set(a,new Set),subscribers.get(a).add(b)},unsubscribe(a,b){if(subscribers.has(a)){const c=subscribers.get(a);c.has(b)&&c.delete(b)}}};navigator.serviceWorker&&navigator.serviceWorker.addEventListener('message',(a)=>{pubsub.publish(a.data)},!1);class User{constructor(){this.id='',this.name='',this.imageURL='',this.token='',this.tokenExpiry=0}}const user=new User;async function resume(){const a=await imageDB.getMeta('token'),b=await imageDB.getMeta('tokenExpiry');if(a&&1e3*b>Date.now())return validate(a)}function logout(){user.token='',pubsub.publish({channel:'logout'})}async function validate(a){if(''!==a){const b=await fetch(`https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=${a}`);if(!b.ok)return void(user.token='');const c=await b.json();if(c.aud===constants.CLIENT_ID){const b=await fetch(`https://www.googleapis.com/plus/v1/people/me?access_token=${a}`),d=await b.json();user.id=d.id,user.name=d.displayName,user.imageURL=d.image.url,user.token=a,user.tokenExpiry=c.exp,setTimeout(logout,1e3*c.expires_in),pubsub.publish({channel:'login'}),await imageDB.setMeta('token',a),await imageDB.setMeta('tokenExpiry',c.exp)}}}const DRIVE_API='https://www.googleapis.com/drive/v3/',DRIVE_UPLOAD_API='https://www.googleapis.com/upload/drive/v3/',COMMON_FILE_FIELDS='kind,id,name,mimeType,appProperties,trashed,version,size';function makeURL(a,b,c){const d=new URL(a);for(const e in b)d.searchParams.append(e,b[e]);if(c)for(const a in c)d.searchParams.append(a,c[a]);return d.toString()}async function driveRequest(a,b,c={}){if(!user.token)throw new Error('Not logged in');const d=makeURL(`${DRIVE_API}${a}`,{access_token:user.token},b),e=await fetch(d,c);return e.json()}async function driveMediaRequest(a,b,c={}){if(!user.token)throw new Error('Not logged in');const d=makeURL(`${DRIVE_API}${a}`,{access_token:user.token,alt:'media'},b),e=await fetch(d,c);return e.blob()}async function driveUploadRequest(a,b){if(!user.token)throw new Error('Not logged in');const c=makeURL(`${DRIVE_UPLOAD_API}${a}`,{access_token:user.token,uploadType:'media'}),d=await fetch(c,{method:'PATCH',body:b});return d.json()}async function getFileMeta(a){return driveRequest(`files/${a}`,{fields:COMMON_FILE_FIELDS})}async function getFileContent(a){return driveMediaRequest(`files/${a}`)}async function createFileMeta(a){return driveRequest(`files`,{fields:COMMON_FILE_FIELDS},{body:JSON.stringify(a),headers:{"Content-Type":'application/json'},method:'POST'})}async function updateFileMeta(a){const b={appProperties:a.appProperties,mimeType:a.mimeType,name:a.name};return driveRequest(`files/${a.id}`,{fields:COMMON_FILE_FIELDS},{body:JSON.stringify(b),headers:{"Content-Type":'application/json'},method:'PATCH'})}async function updateFileContent(a,b){return driveUploadRequest(`files/${a}`,b)}async function folderList(a){let b=[];const c={corpus:'user',fields:`files(${COMMON_FILE_FIELDS})`,q:`'${a}' in parents`,spaces:'drive'};let d='';do{d&&(c.nextPageToken=d);const a=await driveRequest('files',c);b=b.concat(a.files),d=a.nextPageToken}while(d);return b}let snapshotFolder=null;var ChangeType;(function(a){a[a.ADD=0]='ADD',a[a.REMOVE=1]='REMOVE',a[a.UPDATE=2]='UPDATE'})(ChangeType||(ChangeType={}));function syncStart(){syncFiles(),setInterval(syncFiles,constants.SYNC_FREQUENCY+1e3)}'window'in self&&pubsub.subscribe('login',syncStart);async function getSnapshotFolder(){if(snapshotFolder)return snapshotFolder;const a=await driveRequest('files',{corpus:'user',q:`name = '${constants.DRIVE_FOLDER}' and 'root' in parents`,spaces:'drive'});if(a&&1===a.files.length)return snapshotFolder=a.files[0],snapshotFolder;const b={mimeType:'application/vnd.google-apps.folder',name:constants.DRIVE_FOLDER,parents:['root']};return snapshotFolder=await createFileMeta(b),snapshotFolder}async function syncFiles(){if(!user.token)return;const a=+(await imageDB.getMeta('lastSyncTime'));if(console.log((Date.now()-a)/1e3,a+constants.SYNC_FREQUENCY,Date.now()),a+constants.SYNC_FREQUENCY>Date.now())return;let b;constants.SUPPORTS_BGSYNC&&(b=await navigator.serviceWorker.getRegistration());const c=await getSnapshotFolder(),d=await folderList(c.id),e=new Map,f=new Set,g=new Map;for(const a of d)a.id&&e.set(a.id,a);for(const a of await imageDB.all())e.has(a.guid)?(g.set(e.get(a.guid),a),e.delete(a.guid)):f.add(a);if(b){for(const a of e.values())a.trashed||imageDB.addSync({id:0,guid:a.id,upload:!1,includeMedia:!0});for(const a of f)imageDB.addSync({id:a.id,guid:'',upload:!0,includeMedia:!0});for(const[a,b]of g)a.trashed?(pubsub.publish({channel:'sync',data:{type:ChangeType.REMOVE,id:b.id}}),deleteLocal(b)):b.localFilterChanges||b.localImageChanges?imageDB.addSync({guid:a.id,id:b.id,includeMedia:b.localImageChanges,upload:!0}):b.lastSyncVersion<a.version&&imageDB.addSync({id:b.id,guid:a.id,upload:!1,includeMedia:!0});b.sync.register('sync')}else{for(const a of e.values())a.trashed||downloadRemote(a,!0);for(const a of f)uploadLocal(a,a.localImageChanges);for(const[a,b]of g)a.trashed?(pubsub.publish({channel:'sync',data:{type:ChangeType.REMOVE,id:b.id}}),deleteLocal(b)):b.localImageChanges||b.localFilterChanges?uploadLocal(b,b.localImageChanges,a):b.lastSyncVersion<a.version&&downloadRemote(a,!0,b)}imageDB.setMeta('lastSyncTime',Date.now())}async function deleteLocal(a){const b=[];a.originalId&&b.push(a.originalId),a.editedId&&b.push(a.editedId),a.thumbnailId&&b.push(a.thumbnailId),imageDB.deleteRecord(a.id,b)}async function downloadRemote(a,b,c){if(a.id){const b=await getFileContent(a.id);if(b){const d=c||{editedId:null,guid:'',id:null,lastSyncVersion:-1,localFilterChanges:!1,localImageChanges:!1,originalId:null,thumbnailId:null,transform:{}};if(d.guid=a.id,a.appProperties){const b=a.appProperties,c=d.transform||{};c.saturation=+b.saturation||c.saturation,c.warmth=+b.warmth||c.warmth,c.sharpen=+b.sharpen||c.sharpen,c.blur=+b.blur||c.blur,c.brightness=+b.brightness||c.brightness,c.contrast=+b.contrast||c.contrast,c.grey=+b.grey||c.grey,c.vignette=+b.vignette||c.vignette,d.transform=c}return d.localFilterChanges=!1,d.localImageChanges=!1,d.lastSyncVersion=a.version,d.originalId=await imageDB.storeMedia(b),await imageDB.storeRecord(d),pubsub.publish({channel:'sync',data:{type:ChangeType.ADD,id:d.id}}),d.id}console.log(`Could not fetch original image`)}}async function uploadLocal(a,b,c){if(a.originalId){const d=await imageDB.retrieveMedia(a.originalId);if(d){if(!c){const b=await getSnapshotFolder();if(!b||!b.id)return;c={mimeType:d.type,name:`${a.id}_${Date.now()}`,parents:[b.id]}}if(a.transform)for(const b in c.appProperties={},a.transform)c.appProperties[b]=a.transform[b]+'';if(c.id){const b=await updateFileMeta(c);a.lastSyncVersion=b.version}else{const b=await createFileMeta(c);if(!b.id)return;c.id=b.id,a.guid=b.id}if(b){const b=await updateFileContent(c.id,d);a.lastSyncVersion=b.version,a.localImageChanges=!1}return a.localFilterChanges=!1,imageDB.storeRecord(a)}}}const scope=self,{clients}=scope,VERSION=2;console.log(`SW Version ${VERSION}`);const FILES=['/app.min.js','/index.html','/manifest.json','/favicon.ico','/icons/icon-512.png'];scope.addEventListener('install',(a)=>{a.waitUntil(installHandler(a))}),scope.addEventListener('activate',()=>{clients.claim()}),scope.addEventListener('fetch',(a)=>{a.respondWith(fetchHandler(a.request))}),scope.addEventListener('sync',(a)=>{a.waitUntil(syncHandler())});async function installHandler(){const a=await caches.open('snapshot');a.addAll(FILES),scope.skipWaiting()}async function fetchHandler(a){if('navigate'===a.mode){const b=new URL(a.url);b.origin===location.origin&&(a=new Request('/index.html'))}return'GET'===a.method?a.url.match(/googleapis.com/)?networkFirst(a):cacheFirst(a):fetch(a)}async function cacheFirst(a){const b=await caches.open('snapshot'),c=await b.match(a);if(c)return c;const d=await fetch(a);return d.ok&&b.put(a,d.clone()),d}async function networkFirst(a){const b=await caches.open('snapshot');let c=await fetch(a);try{c=await fetch(a)}catch(a){console.log(`Fetch error: ${a}`)}return c?(c.ok&&b.put(a,c.clone()),c):b.match(a)}async function syncHandler(){await resume();const a=await imageDB.listSync();for(const b of a)doSync(b)}async function doSync(a){let b,c;if(a.id&&(b=await imageDB.retrieveRecord(a.id)),a.guid&&(c=await getFileMeta(a.guid)),b&&a.upload)await uploadLocal(b,b.localImageChanges,c);else if(c&&!a.upload){const a=await downloadRemote(c,!0,b);a&&sendMessage({id:a,type:ChangeType.ADD})}imageDB.removeSync(a.id,a.guid)}async function sendMessage(a){const b=await clients.matchAll({includeUncontrolled:!1,type:'window'});for(const c of b)c.postMessage({channel:'sync',data:a})}
//# sourceMappingURL=sw.js.map
